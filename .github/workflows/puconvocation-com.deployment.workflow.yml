name: Build and Deploy puconvocation-com to AWS ECS

on:
  push:
    tags:
      - "puconvocation-com-v*"

env:
  DEPLOYMENT_ARN: ${{ secrets.DEPLOYMENT_ARN }}
  REGION: ${{ secrets.REGION }}
  CLUSTER: puconvocation
  SERVICE: puconvocation-com
  TASK: puconvocation-com-task

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        id: credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.DEPLOYMENT_ARN }}
          aws-region: ${{ env.REGION }}
          output-credentials: true

      - name: Login to Amazon ECR Private
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Write credentials to file
        run: |
          if [ -d "${{ github.workspace }}/.aws" ]; then
            echo "Folder 'aws' already exists. Skipping creation."
          else
            mkdir -p ${{ github.workspace }}/.aws
          fi
          echo "[default]" > ${{ github.workspace }}/.aws/credentials
          echo "aws_access_key_id = ${{ steps.credentials.outputs.aws-access-key-id  }}" >> ${{ github.workspace }}/.aws/credentials
          echo "aws_secret_access_key = ${{ steps.credentials.outputs.aws-secret-access-key }}" >> ${{ github.workspace }}/.aws/credentials
          echo "aws_session_token = ${{ steps.credentials.outputs.aws-session-token }}" >> ${{ github.workspace }}/.aws/credentials


      - name: Download task definition
        run: |
          if [ -d "${{ github.workspace }}/.aws" ]; then
            echo "Folder 'aws' already exists. Skipping creation."
          else
            mkdir -p ${{ github.workspace }}/.aws
          fi
          aws ecs describe-task-definition --task-definition ${{ env.TASK }} --query taskDefinition > ${{ github.workspace }}/.aws/task-definition.json


      - name: 'Write Env File'
        uses: "finnp/create-file-action@master"
        env:
          FILE_NAME: ${{ github.workspace }}/frontend/websites/puconvocation-com/.env.local
          FILE_BASE64: ${{ secrets.PUCONVOCATION_COM_ENV }}

      - name: 'Write JWKS File'
        uses: "finnp/create-file-action@master"
        env:
          FILE_NAME: ${{ github.workspace }}/frontend/websites/puconvocation-com/public/.well-known/jwks.json
          FILE_BASE64: ${{ secrets.PUCONVOCATION_COM_JWKS }}

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        working-directory: ./frontend/websites/puconvocation-com
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: puconvocation/${{ env.SERVICE }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --secret id=aws,src=${{ github.workspace }}/.aws/credentials --build-arg cdn=${{ secrets.CDN }} -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: configure-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ github.workspace }}/.aws/task-definition.json
          container-name: ${{ env.SERVICE }}
          image: ${{ steps.build-image.outputs.image }}


      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.configure-task-definition.outputs.task-definition }}
          service: ${{ env.SERVICE }}
          cluster: ${{ env.CLUSTER }}
          wait-for-service-stability: true
          force-new-deployment: true